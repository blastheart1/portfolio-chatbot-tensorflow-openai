import React, { useState, useRef, useEffect, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Send, X, Brain, Save, XCircle } from 'lucide-react';
import { MessageBubble, Message } from './MessageBubble';
import { TensorFlowService } from '../lib/tensorflowModel';
import { OpenAIService } from '../lib/openaiService';
import { LeadForm, LeadData } from './LeadForm';
import { ResendService } from '../lib/resendService';
import { LeadDetectionService } from '../lib/leadDetectionService';
import { QuickSuggestions } from './QuickSuggestions';

interface ChatWindowProps {
  isOpen: boolean;
  onClose: () => void;
  tensorflowService: TensorFlowService;
  openaiService: OpenAIService;
  onLearningExample: (userInput: string, openAiResponse: string) => Promise<{success: boolean, reason?: string}>;
}

// Configuration for AI response customization
const AI_RESPONSE_CONFIG = {
  // Set to empty string to remove prefix entirely
  // Set to custom text to change the prefix
  // Set to null to use default prefix
  prefix: "", // Change this to customize the AI response prefix
  
  // Alternative examples:
  // prefix: "🤖 AI Response:", 
  // prefix: "Generated by AI:",
  // prefix: "", // No prefix
  // prefix: "Here's what I found:",
};

export const ChatWindow: React.FC<ChatWindowProps> = ({
  isOpen,
  onClose,
  tensorflowService,
  openaiService,
  onLearningExample,
}) => {
  // Check if we're in an iframe (embed mode)
  const isInIframe = window.parent !== window;
  
  // Custom close handler for embed mode
  const handleClose = useCallback(() => {
    if (isInIframe) {
      // Send message to parent window to close the overlay
      console.log('📤 Sending close message to parent window...');
      window.parent.postMessage('close-chat', '*');
      
      // Fallback: also try to close the iframe itself after a short delay
      setTimeout(() => {
        console.log('🔄 Fallback: Closing iframe...');
        window.parent.postMessage('close-chat', '*');
      }, 100);
    } else {
      // Normal close for non-embed mode
      onClose();
    }
  }, [isInIframe, onClose]);
  
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [showLearningPrompt, setShowLearningPrompt] = useState(false);
  const [pendingLearning, setPendingLearning] = useState<{userInput: string, openAiResponse: string} | null>(null);
  const [isLearning, setIsLearning] = useState(false);
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [showLeadForm, setShowLeadForm] = useState(false);
  const [leadTriggerContext, setLeadTriggerContext] = useState('');
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // Initialize lead generation services
  const leadDetectionService = useRef(new LeadDetectionService());
  
  // Debug environment variables
  useEffect(() => {
    console.log('🔍 Lead Generation Environment Check:');
    console.log('  - REACT_APP_RESEND_API_KEY:', process.env.REACT_APP_RESEND_API_KEY ? 'configured' : 'missing');
    console.log('  - REACT_APP_FROM_EMAIL:', process.env.REACT_APP_FROM_EMAIL ? 'configured' : 'not set');
    console.log('  - REACT_APP_TO_EMAIL:', process.env.REACT_APP_TO_EMAIL ? 'configured' : 'not set');
  }, []);
  
  const resendService = useRef(new ResendService({
    apiKey: process.env.REACT_APP_RESEND_API_KEY || '',
    fromEmail: 'onboarding@resend.dev', // Always use verified Resend domain
    toEmail: process.env.REACT_APP_TO_EMAIL || 'antonioluis.santos1@gmail.com'
  }));

  // Generate unique IDs to prevent duplicate keys
  const generateUniqueId = useCallback(() => {
    return `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }, []);

  // Detect dark mode
  useEffect(() => {
    const checkDarkMode = () => {
      setIsDarkMode(document.documentElement.classList.contains('dark') || 
                   window.matchMedia('(prefers-color-scheme: dark)').matches);
    };
    
    checkDarkMode();
    
    // Listen for theme changes
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    mediaQuery.addEventListener('change', checkDarkMode);
    
    // Listen for class changes on document
    const observer = new MutationObserver(checkDarkMode);
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
    
    return () => {
      mediaQuery.removeEventListener('change', checkDarkMode);
      observer.disconnect();
    };
  }, []);

  // Helper function to format AI response with customizable prefix
  const formatAIResponse = (content: string): string => {
    if (AI_RESPONSE_CONFIG.prefix === "") {
      // No prefix - return content as is (speaking as Luis directly)
      return content;
    } else if (AI_RESPONSE_CONFIG.prefix === null) {
      // Use default prefix
      return content; // Let Luis speak naturally
    } else {
      // Use custom prefix
      return `${AI_RESPONSE_CONFIG.prefix}\n\n${content}`;
    }
  };

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Focus input when chat opens
  useEffect(() => {
    if (isOpen && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isOpen]);

  // Add welcome message when chat first opens
  useEffect(() => {
    if (isOpen && messages.length === 0) {
      const welcomeMessage: Message = {
        id: 'welcome',
        content: "Hi there! I'm Luis, a software developer and team manager. I can tell you about my background, skills, services, and hobbies. Feel free to ask me anything!",
        isUser: false,
        timestamp: new Date(),
        source: 'faq',
      };
      setMessages([welcomeMessage]);
    }
  }, [isOpen, messages.length]);

  // Check for inappropriate content
  const isInappropriateContent = (text: string): boolean => {
    
    const inappropriatePatterns = [
      'do you like girls', 'are you single', 'do you have a girlfriend',
      'are you married', 'do you have a wife', 'are you dating',
      'do you like women', 'are you straight', 'do you like boys',
      'what do you think about girls', 'do you find me attractive',
      'are you gay', 'whats your type', 'do you want to date'
    ];
    
    const lowerText = text.toLowerCase().trim();
    
    // Check for profanity (exact word matches to avoid false positives)
    const profanityWords = ['fuck', 'shit', 'damn', 'bitch', 'ass', 'hell', 'crap', 'piss',
                           'tite', 'puke', 'puki', 'puta', 'gago', 'tangina', 'ulol', 'bobo',
                           'tanga', 'walanghiya', 'lintik', 'hayop', 'pokpok', 'putang'];
    
    const hasProfanity = profanityWords.some(word => {
      const regex = new RegExp(`\\b${word}\\b`, 'i');
      return regex.test(lowerText);
    });
    
    if (hasProfanity) return true;
    
    // Check for personal/inappropriate words (exact word matches)
    const personalWords = ['girls', 'boys', 'women', 'men', 'sex', 'sexy', 'hot', 'beautiful', 
                           'cute', 'attractive', 'single', 'girlfriend', 'boyfriend', 'wife', 
                           'husband', 'marriage', 'dating', 'love', 'kiss', 'hug'];
    
    const hasPersonalWord = personalWords.some(word => {
      const regex = new RegExp(`\\b${word}\\b`, 'i');
      return regex.test(lowerText);
    });
    
    if (hasPersonalWord) return true;
    
    // Check for inappropriate patterns
    const hasInappropriatePattern = inappropriatePatterns.some(pattern => lowerText.includes(pattern));
    if (hasInappropriatePattern) return true;
    
    return false;
  };

  // Simple keyword-based FAQ matching as fallback
  const findSimpleFAQMatch = (userMessage: string): { response: string } | null => {
    const message = userMessage.toLowerCase();
    
    // Check for inappropriate content first
    if (isInappropriateContent(userMessage)) {
      if (message.includes('tite') || message.includes('puta') || message.includes('gago') || 
          message.includes('tangina') || message.includes('ulol') || message.includes('bobo')) {
        return { 
          response: "Sorry, I'd be happy to discuss more valuable topics and let's not waste time. How about we talk about my **website development services**, **AI chatbot solutions**, or my **technical expertise** instead?" 
        };
      } else if (message.includes('girls') || message.includes('boys') || message.includes('women') || 
                 message.includes('men') || message.includes('single') || message.includes('girlfriend') || 
                 message.includes('married') || message.includes('dating') || message.includes('attractive') ||
                 message.includes('love') || message.includes('kiss') || message.includes('hug')) {
        return { 
          response: "I'm married and prefer to keep our conversation professional. I'd be happy to discuss my **services**, **projects**, or **technical skills** instead. What can I help you with professionally?" 
        };
      }
    }
    
    // Simple keyword matching for common questions - speaking as Luis directly
    const faqMatches = [
      {
        keywords: ['who are you', 'what do you do', 'introduce yourself', 'your name', 'hi', 'hello', 'hey'],
        response: "Hi there! I'm Luis, a Senior IBM ODM Specialist and QA Team Manager at Bell Digital Billboards. I'm also a Full-Stack Developer who leverages AI, machine learning, and generative technologies to elevate business processes and create intelligent solutions."
      },
      {
        keywords: ['skills', 'programming', 'languages', 'typescript', 'javascript', 'react', 'java', 'c++'],
        response: "I specialize in TypeScript and JavaScript for modern web development, plus React and Next.js. I also have experience with Java, C++, Python, and various databases like PostgreSQL and MySQL."
      },
      {
        keywords: ['chatbot', 'ai', 'tensorflow', 'openai', 'machine learning'],
        response: "Yes! I leverage AI and machine learning to create intelligent solutions that elevate business operations. I build AI-powered chatbots, develop generative AI applications, and implement machine learning models to automate processes and drive innovation. This very chatbot you're talking to is an example of my work."
      },
      {
        keywords: ['hobbies', 'rc cars', 'cycling', 'coffee', 'sim racing', 'youtube', 'f1', 'formula'],
        response: "I love Formula 1, cycling (both road and gravel), RC car builds with Tamiya kits, coffee brewing, and sim racing. I share these hobbies on my YouTube channel 'Sunraku-san TV'."
      },
      {
        keywords: ['contact', 'email', 'linkedin', 'reach you', 'hire', 'freelance'],
        response: "You can reach me at antonioluis.santos1@gmail.com or through LinkedIn. I'm based in Manila, Philippines, and I'm open to freelance opportunities in full-stack development, AI chatbot design, and QA process optimization."
      },
      {
        keywords: ['background', 'experience', 'career', 'work'],
        response: "I'm currently a Senior IBM ODM Specialist (BRMS) & QA Team Manager at Bell Canada since October 2024. Previously, I was a Senior IBM ODM Developer and before that an ODM Developer | BRMS Engineer, all at Bell Canada."
      },
      {
        keywords: ['pricing', 'cost', 'price', 'rate', 'how much'],
        response: "I offer three website packages: Starter at ₱22,000 ($599 overseas), Professional at ₱45,000 ($1,199 overseas), and Enterprise at ₱100,000 ($2,999 overseas). All include responsive design, SEO, hosting, and AI chatbot integration."
      },
      {
        keywords: ['ecommerce', 'e-commerce', 'online store', 'shop', 'website'],
        response: "Yes, I can build e-commerce sites and full-featured websites! I create online stores with payment integration, inventory management, and AI chatbot support using modern tech stacks like React, Node.js, and Stripe."
      },
      {
        keywords: ['services', 'what services', 'what can you help', 'what do you do for clients', 'solutions'],
        response: "Hello! I offer a range of services tailored to meet your needs:\n\n**1. Website Development**\n• **Starter** (₱22,000/$599 overseas) - Perfect for small businesses\n• **Professional** (₱45,000/$1,199 overseas) - Ideal for growing businesses\n• **Enterprise** (₱100,000/$2,999 overseas) - For large organizations\n\n**2. AI Chatbot Integration**\n• Smart Support Chatbot (+₱7,000)\n• 24/7 E-commerce Chatbot (+₱15,000)\n• Advanced AI Chatbot (included in Enterprise)\n\n**3. Full-stack Development**\nFrom frontend to backend, I specialize in building future-ready applications using React, Next.js, TypeScript, Node.js, Express, and PostgreSQL.\n\n**4. BRMS Solutions**\nAs a Senior IBM ODM Specialist, I provide Business Rule Management Systems for enterprise solutions.\n\n**5. QA & Team Management**\nI lead QA teams and optimize processes for accuracy, reliability, and seamless delivery.\n\nFeel free to reach out to discuss your specific needs!"
      }
    ];

    for (const match of faqMatches) {
      if (match.keywords.some(keyword => message.includes(keyword))) {
        return { response: match.response };
      }
    }
    
    return null;
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: generateUniqueId(),
      content: inputValue.trim(),
      isUser: true,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    try {
      // Check for lead generation response FIRST (before regular processing)
      const isPositiveResponse = checkFollowUpInterest(userMessage.content);
      const isNegativeResponse = userMessage.content.toLowerCase().includes('no') || 
                               userMessage.content.toLowerCase().includes('not interested') ||
                               userMessage.content.toLowerCase().includes('not now');
      const lastMessage = messages[messages.length - 1];
      
      if (isPositiveResponse && lastMessage && lastMessage.content.includes('Would you like me to reach out')) {
        console.log('✅ User expressed interest in follow-up discussion');
        // Show the lead form immediately
        setTimeout(() => {
          setShowLeadForm(true);
        }, 1000);
        
        setIsTyping(false);
        return; // Exit early - don't process as regular message
      } else if (isNegativeResponse && lastMessage && lastMessage.content.includes('Would you like me to reach out')) {
        console.log('❌ User declined follow-up discussion');
        // Provide a polite acknowledgment
        setTimeout(() => {
          const acknowledgmentMessage: Message = {
            id: generateUniqueId(),
            content: "No problem at all! Feel free to reach out anytime if you have questions about my services. I'm here to help whenever you're ready!",
            isUser: false,
            timestamp: new Date(),
            source: 'faq',
            confidence: 0.9,
            relevance: 0.7,
          };
          setMessages(prev => [...prev, acknowledgmentMessage]);
        }, 1000);
        
        setIsTyping(false);
        return; // Exit early - don't process as regular message
      }

      let response: Message;
      let usedOpenAI = false;
      let openAiResponse = '';

      // First try TensorFlow.js intent recognition (PRIMARY INTELLIGENCE)
      if (tensorflowService.isModelReady()) {
        console.log('🤖 Using TensorFlow.js as primary intelligence');
        const prediction = await tensorflowService.classifyInput(userMessage.content);
        
        if (prediction) {
          // High confidence TensorFlow match - this is our primary response
          response = {
            id: generateUniqueId(),
            content: prediction.response,
            isUser: false,
            timestamp: new Date(),
            source: prediction.source === 'learned' ? 'ai' : 'faq',
            confidence: prediction.confidence,
            relevance: prediction.relevance,
          };
        } else {
          // TensorFlow didn't find a good match, try Luis-focused fallback
          console.log('📚 TensorFlow no match, trying Luis direct answers...');
          const fallbackPrediction = tensorflowService.generateLuisFallback(userMessage.content);
          
          if (fallbackPrediction) {
            // Use direct Luis answer
            response = {
              id: generateUniqueId(),
              content: fallbackPrediction.response,
              isUser: false,
              timestamp: new Date(),
              source: 'faq',
              confidence: fallbackPrediction.confidence,
              relevance: fallbackPrediction.relevance,
            };
          } else {
            // No direct answer available, use OpenAI with Luis context
            console.log('🤖 Using OpenAI with Luis context for complex/generic questions...');
            if (openaiService.isConfigured()) {
              try {
                const aiResponse = await openaiService.generatePortfolioResponse(userMessage.content, messages);
                openAiResponse = aiResponse.content;
                usedOpenAI = true;
                response = {
                  id: generateUniqueId(),
                  content: formatAIResponse(aiResponse.content),
                  isUser: false,
                  timestamp: new Date(),
                  source: 'ai',
                };
              } catch (openaiError) {
                console.warn('OpenAI error, using simple fallback:', openaiError);
                response = {
                  id: generateUniqueId(),
                  content: "I'm not sure about that specific question. Feel free to reach out to me directly for more detailed discussions!",
                  isUser: false,
                  timestamp: new Date(),
                  source: 'faq',
                };
              }
            } else {
              // No OpenAI, simple fallback
              response = {
                id: generateUniqueId(),
                content: "I'm not sure about that specific question. Feel free to reach out to me directly for more detailed discussions!",
                isUser: false,
                timestamp: new Date(),
                source: 'faq',
              };
            }
          }
        }
      } else {
        console.log('⚠️ TensorFlow model not ready, using simple keyword matching...');
        // Model not ready, try simple keyword matching first
        const simpleMatch = findSimpleFAQMatch(userMessage.content);
        if (simpleMatch) {
          response = {
            id: generateUniqueId(),
            content: simpleMatch.response,
            isUser: false,
            timestamp: new Date(),
            source: 'faq',
          };
        } else if (openaiService.isConfigured()) {
          try {
            const aiResponse = await openaiService.generatePortfolioResponse(userMessage.content, messages);
            openAiResponse = aiResponse.content;
            usedOpenAI = true;
            response = {
              id: generateUniqueId(),
              content: formatAIResponse(aiResponse.content),
              isUser: false,
              timestamp: new Date(),
              source: 'ai',
            };
          } catch (openaiError) {
            console.warn('OpenAI error, falling back to FAQ:', openaiError);
            response = {
              id: generateUniqueId(),
              content: "I'm not sure about that. You can reach out to Luis directly for more specific questions!",
              isUser: false,
              timestamp: new Date(),
              source: 'faq',
            };
          }
        } else {
          response = {
            id: generateUniqueId(),
            content: "I'm not sure about that. You can reach out to Luis directly for more specific questions!",
            isUser: false,
            timestamp: new Date(),
            source: 'faq',
          };
        }
      }

      // Simulate typing delay
      setTimeout(() => {
        setMessages(prev => [...prev, response]);
        setIsTyping(false);

        // Focus back on input after response
        setTimeout(() => {
          if (inputRef.current) {
            inputRef.current.focus();
          }
        }, 100);

        // Check for lead generation opportunity
        const conversationHistory = [...messages, userMessage].map(m => m.content);
        const leadTrigger = leadDetectionService.current.detectLeadOpportunity(userMessage.content, conversationHistory);
        
        if (leadTrigger.shouldShowForm) {
          console.log('🎯 Lead opportunity detected:', leadTrigger);
          // Instead of showing form immediately, ask if they want to discuss further
          setTimeout(() => {
            const followUpMessage: Message = {
              id: generateUniqueId(),
              content: `${leadTrigger.triggerContext} Would you like me to reach out to discuss your project needs in more detail?`,
              isUser: false,
              timestamp: new Date(),
              source: 'faq',
              confidence: 0.9,
              relevance: 0.8,
            };
            setMessages(prev => [...prev, followUpMessage]);
            setLeadTriggerContext(leadTrigger.triggerContext);
            // Don't show form yet - wait for user response
          }, 1500);
        }

        // Show learning prompt if OpenAI was used
        if (usedOpenAI && openAiResponse) {
          setPendingLearning({
            userInput: userMessage.content,
            openAiResponse: openAiResponse
          });
          setShowLearningPrompt(true);
        }
      }, 1000);

    } catch (error) {
      console.error('Error generating response:', error);
      const errorMessage: Message = {
        id: generateUniqueId(),
        content: "Sorry, I encountered an error. Please try again or contact Luis directly.",
        isUser: false,
        timestamp: new Date(),
        source: 'faq',
      };
      setMessages(prev => [...prev, errorMessage]);
      setIsTyping(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // Handle lead form submission
  const handleLeadSubmission = async (leadData: LeadData) => {
    try {
      // Send lead notification to Luis
      await resendService.current.sendLeadNotification(leadData);
      
      // Send welcome email to the lead
      await resendService.current.sendWelcomeEmail(leadData);
      
      console.log('✅ Lead submitted successfully:', leadData);
      
      // Add thank you message after successful submission
      setTimeout(() => {
        const thankYouMessage: Message = {
          id: generateUniqueId(),
          content: "Thank you! Luis will reach out to you within 24-48 hours. Is there anything else I can help you with?",
          isUser: false,
          timestamp: new Date(),
          source: 'faq',
          confidence: 0.9,
          relevance: 0.8,
        };
        setMessages(prev => [...prev, thankYouMessage]);
      }, 1000);
      
    } catch (error) {
      console.error('❌ Failed to submit lead:', error);
      throw error; // Re-throw so the form can handle the error
    }
  };

  // Handle suggestion clicks
  const handleSuggestionClick = (suggestion: string, triggerLead?: boolean) => {
    setInputValue(suggestion);
    
    // For lead-triggering suggestions, let the normal message flow handle the follow-up
    // The handleSendMessage function will detect the lead opportunity and ask first
    if (triggerLead) {
      setLeadTriggerContext(`You asked about: "${suggestion}"`);
    }
  };

  // Check if user is interested in follow-up discussion
  const checkFollowUpInterest = (userInput: string): boolean => {
    const lowerInput = userInput.toLowerCase().trim();
    
    // Positive responses
    const positiveResponses = [
      'yes', 'yeah', 'yep', 'sure', 'ok', 'okay', 'absolutely', 'definitely',
      'i would like', 'i\'d like', 'please', 'that sounds good', 'sounds good',
      'i\'m interested', 'i am interested', 'yes please', 'sure thing',
      'let\'s discuss', 'let us discuss', 'i want to', 'i\'d love to',
      'that would be great', 'perfect', 'great idea', 'i\'d be interested'
    ];
    
    // Negative responses
    const negativeResponses = [
      'no', 'nope', 'not interested', 'not now', 'maybe later', 'not yet',
      'i\'m not interested', 'no thanks', 'not at the moment', 'pass',
      'not right now', 'maybe some other time', 'i\'ll think about it'
    ];
    
    // Check for positive responses
    const hasPositiveResponse = positiveResponses.some(response => 
      lowerInput.includes(response)
    );
    
    // Check for negative responses
    const hasNegativeResponse = negativeResponses.some(response => 
      lowerInput.includes(response)
    );
    
    // If we have a clear positive response and no negative response, show interest
    return hasPositiveResponse && !hasNegativeResponse;
  };

  const handleLearningDecision = async (shouldLearn: boolean) => {
    if (shouldLearn && pendingLearning) {
      setIsLearning(true);
      
      try {
        const result = await onLearningExample(pendingLearning.userInput, pendingLearning.openAiResponse);
        
        if (!result.success) {
          // Show error message to user
          const errorMessage: Message = {
            id: generateUniqueId(),
            content: `❌ Learning failed: ${result.reason}`,
            isUser: false,
            timestamp: new Date(),
            source: 'faq',
          };
          setMessages(prev => [...prev, errorMessage]);
        } else {
          // Show success message
          const successMessage: Message = {
            id: generateUniqueId(),
            content: "✅ I've learned from this example and will remember it for future conversations!",
            isUser: false,
            timestamp: new Date(),
            source: 'faq',
          };
          setMessages(prev => [...prev, successMessage]);
        }
      } finally {
        setIsLearning(false);
      }
    }
    setShowLearningPrompt(false);
    setPendingLearning(null);
  };

  // Detect if we're on mobile
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);
  
  // Update mobile detection on resize
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth <= 768);
    };
    
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          key="chat-window"
          initial={{ opacity: 0, scale: isMobile ? 1 : 0.8, y: isMobile ? 0 : 20 }}
          animate={{ opacity: 1, scale: 1, y: 0 }}
          exit={{ opacity: 0, scale: isMobile ? 1 : 0.8, y: isMobile ? 0 : 20 }}
          transition={{ duration: 0.3, ease: "easeOut" }}
          className={`
            ${isMobile || isInIframe 
              ? 'fixed inset-0 w-full h-full bg-white flex flex-col z-50' 
              : 'fixed bottom-6 right-6 w-96 h-[500px] bg-white rounded-2xl shadow-2xl border border-gray-200 flex flex-col z-50'
            }
          `}
          style={{
            // Apple device safe area support
            paddingTop: isMobile ? 'env(safe-area-inset-top, 0px)' : '0px',
            paddingBottom: isMobile ? 'env(safe-area-inset-bottom, 0px)' : '0px',
            paddingLeft: isMobile ? 'env(safe-area-inset-left, 0px)' : '0px',
            paddingRight: isMobile ? 'env(safe-area-inset-right, 0px)' : '0px',
          }}
        >
          {/* Header */}
          <div 
            className={`flex items-center justify-between border-b border-gray-200 text-white ${
              isMobile ? 'p-4' : 'p-4 rounded-t-2xl'
            }`}
            style={{
              background: isDarkMode 
                ? 'linear-gradient(to right, #ffffff, #0033a0)' 
                : 'linear-gradient(to right, #000000, #0033a0)',
              color: isDarkMode ? '#000000' : '#ffffff',
              minHeight: isMobile ? '60px' : 'auto'
            }}
          >
            <div className="flex items-center space-x-2">
              <img 
                src="/LuisBot.ico" 
                alt="LuisBot" 
                className="w-6 h-6"
              />
              <div>
                <h3 className="font-semibold">Luis</h3>
                <p className="text-xs opacity-90">Software Developer & Team Manager</p>
              </div>
            </div>
            <button
              onClick={handleClose}
              className="p-1 hover:bg-white hover:bg-opacity-20 rounded-full transition-colors"
            >
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Messages */}
          <div className={`flex-1 overflow-y-auto bg-chat-bg ${isMobile ? 'p-3' : 'p-4'}`}>
            {messages.map((message) => (
              <MessageBubble key={message.id} message={message} />
            ))}

            {/* Quick Suggestions - Show when no messages or after first user message */}
            {messages.length === 0 || (messages.length === 1 && messages[0].isUser) ? (
              <QuickSuggestions
                onSuggestionClick={handleSuggestionClick}
                isVisible={!isTyping}
                className="mt-4"
              />
            ) : null}
            
            {/* Typing indicator */}
            {isTyping && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="flex justify-start mb-4"
              >
                <div className="bg-chat-bubble-bot text-gray-800 border border-chat-border rounded-2xl rounded-bl-md px-4 py-3">
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                </div>
              </motion.div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Learning Prompt */}
          {showLearningPrompt && (
            <motion.div
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              className="p-3 bg-blue-50 border-t border-blue-200"
            >
              <div className="flex items-center space-x-2 text-sm text-blue-800 mb-2">
                <Brain className="w-4 h-4" />
                <span className="font-medium">Should I remember this answer?</span>
              </div>
              
              {isLearning ? (
                <div className="flex items-center space-x-2 text-sm text-blue-600">
                  <div className="w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                  <span>Saving and training AI model...</span>
                </div>
              ) : (
                <div className="flex space-x-2">
                  <button
                    onClick={() => handleLearningDecision(true)}
                    className="flex items-center space-x-1 px-3 py-1 bg-blue-500 text-white rounded-full text-xs hover:bg-blue-600 transition-colors"
                  >
                    <Save className="w-3 h-3" />
                    <span>Yes, remember</span>
                  </button>
                  <button
                    onClick={() => handleLearningDecision(false)}
                    className="flex items-center space-x-1 px-3 py-1 bg-gray-500 text-white rounded-full text-xs hover:bg-gray-600 transition-colors"
                  >
                    <XCircle className="w-3 h-3" />
                    <span>No, thanks</span>
                  </button>
                </div>
              )}
            </motion.div>
          )}

          {/* Input */}
          <div 
            className={`border-t border-gray-200 ${isMobile ? 'p-3' : 'p-4'}`}
            style={{
              // Extra padding for iOS keyboard
              paddingBottom: isMobile ? 'calc(env(safe-area-inset-bottom, 0px) + 12px)' : undefined
            }}
          >
            <div className="flex space-x-2">
              <input
                ref={inputRef}
                type="text"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder={isLearning ? "Learning in progress..." : "Ask me anything about Luis..."}
                className={`flex-1 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                  isMobile ? 'px-4 py-3 text-base' : 'px-4 py-2'
                }`}
                disabled={isTyping || isLearning}
                style={{
                  // Prevent zoom on iOS
                  fontSize: isMobile ? '16px' : undefined
                }}
              />
              <button
                onClick={handleSendMessage}
                disabled={!inputValue.trim() || isTyping || isLearning}
                className={`bg-blue-500 text-white rounded-full hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center justify-center ${
                  isMobile ? 'p-3 min-w-[52px] min-h-[52px]' : 'p-3 min-w-[48px] min-h-[48px]'
                }`}
              >
                <Send className={`${isMobile ? 'w-6 h-6' : 'w-5 h-5'}`} />
              </button>
            </div>
          </div>
        </motion.div>
      )}

      {/* Lead Generation Form */}
      <LeadForm
        isOpen={showLeadForm}
        onClose={() => {
          setShowLeadForm(false);
          // Add cancellation message when form is closed without submission
          setTimeout(() => {
            const cancellationMessage: Message = {
              id: generateUniqueId(),
              content: "I see you did not finish your form, just let me know anytime you're interested in my service. Thank you! Is there anything else?",
              isUser: false,
              timestamp: new Date(),
              source: 'faq',
              confidence: 0.9,
              relevance: 0.8,
            };
            setMessages(prev => [...prev, cancellationMessage]);
          }, 1000);
        }}
        onSubmit={handleLeadSubmission}
        triggerContext={leadTriggerContext}
      />
    </AnimatePresence>
  );
};